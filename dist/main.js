(()=>{"use strict";const e=(()=>{const e=document.querySelector(".P1"),t=document.querySelector(".P2"),s=document.querySelector(".sample");let a="PLAY";const r=e=>{const t=e.split(" ");return{x:+t[0],y:+t[1]}},d=()=>{t.classList.add("active")};return d(),{init:d,renderGameboard:(d,c,n)=>{let l="P1"===d?e:t;"sample"===d?(l=s,a="PLACE"):a="PLAY",l.textContent="",l.classList.add(c),n.forEach((e=>l.appendChild((e=>{const t=document.createElement("div");return t.classList.add("cell"),t.setAttribute("data-coords",`${e.coords.x} ${e.coords.y}`),e.hasShip&&t.classList.add("ship"),(e=>{"PLACE"===a&&(e.addEventListener("click",(()=>{o.placeShip(r(e.getAttribute("data-coords")))})),e.addEventListener("mouseover",(()=>{o.showShip(r(e.getAttribute("data-coords")))}))),e.addEventListener("click",(()=>{i.playTurn(r(e.getAttribute("data-coords")))}))})(t),t})(e))))},cellHit:e=>{const t=`${e.x} ${e.y}`;document.querySelector(`.active > [data-coords="${t}"]`).classList.add("hit")},shipSunk:e=>{e.forEach((e=>{document.querySelector(`.active > [data-coords="${e.x} ${e.y}"]`).classList.add("sunk")}))},toggleActiveBoard:()=>{e.classList.toggle("active"),t.classList.toggle("active")}}})(),t=t=>{const s=[],a=(e=>{const t=[];for(let s=0;s<e*e;s++)t.push({coords:{x:s%e,y:Math.floor(s/e)},hasShip:"",isShot:!1});return t})(t),r=e=>a[e.x+e.y*t];return{at:r,isValidAttack:e=>!r(e).isShot,isShipHit:e=>""!==r(e).hasShip,receiveAttack:t=>{const i=r(t);if(i.isShot=!0,e.cellHit(t),i.hasShip){const t=s.find((e=>e.name===i.hasShip));t.hit(),t.isSunk()&&(t=>{console.log(t);const s=a.filter((e=>e.hasShip===t)).map((e=>e.coords));e.shipSunk(s)})(t.name)}},setShip:(e,t,a="x")=>{s.push(e);let i=t;for(let t=0;t<e.getLength();t++)r(i).hasShip=e.name,"x"===a?i.x++:i.y++},isCollisions:e=>{for(const s of e){if(s.x>t-1||s.y>t-1)return!0;if(""!==r(s).hasShip)return!0}return!1},getBoard:()=>a}},s=e=>({name:e,gameboard:t(10),isActive:!1}),a=(e,t)=>{const s=e;let a=0;return{name:t,getLength:()=>s,getHits:()=>a,hit:()=>{a++},isSunk:()=>s===a}},r=e=>{const t=e.filter((e=>!e.isShot));return t[Math.floor(Math.random()*t.length)].coords},i=(()=>{const t=s("player"),i=s("enemy"),d=()=>t.isActive?i:t,c=s=>{const a=d().gameboard;a.isValidAttack(s)&&(a.receiveAttack(s),a.isShipHit(s)||(t.isActive=!t.isActive,i.isActive=!i.isActive,e.toggleActiveBoard()),n())},n=async()=>{i.isActive&&(await(300,new Promise((e=>setTimeout(e,300)))),c(r(d().gameboard.getBoard())))};return{init:()=>{t.isActive=!0,t.gameboard=o.getSamplePlayer().gameboard,e.renderGameboard("P1",t.name,t.gameboard.getBoard()),(()=>{i.isActive=!1;let t=[a(3,"enemya"),a(2,"enemyb")];i.gameboard.setShip(t[0],{x:1,y:1},"x"),i.gameboard.setShip(t[1],{x:2,y:5},"y"),e.renderGameboard("P2",i.name,i.gameboard.getBoard())})()},playTurn:c}})(),o=(()=>{const t=s("sample"),r=[a(4,"ak"),a(2,"b"),a(5,"c"),a(4,"d"),a(2,"e")];let o={shipNum:0,shipCoordsArray:[],axis:"x"};const d=document.querySelector(".modal"),c=e=>document.querySelector(`[data-coords="${e.x} ${e.y}"]`),n=e=>{0!==o.shipCoordsArray.length&&o.shipCoordsArray.forEach((e=>{c(e).classList.remove("temp"),c(e).classList.remove("invalid")})),o.shipCoordsArray=l(e),o.shipCoordsArray.forEach((e=>{c(e).classList.add("temp")})),h()||o.shipCoordsArray.forEach((e=>{c(e).classList.add("invalid")}))},l=e=>{let t=[],s=e;for(let e=0;e<r[o.shipNum].getLength()&&(t.push({x:s.x,y:s.y}),"x"===o.axis?s.x++:s.y++,!(s.x>9||s.y>9));e++);return t},h=()=>!t.gameboard.isCollisions(o.shipCoordsArray)&&o.shipCoordsArray.length===r[o.shipNum].getLength();return{init:()=>{e.renderGameboard("sample",t.name,t.gameboard.getBoard()),document.addEventListener("keyup",(({key:e})=>{"R"!==e&&"r"!==e||(o.axis="x"===o.axis?"y":"x",n(o.shipCoordsArray[0],o.axis))}))},placeShip:s=>{h()&&(t.gameboard.setShip(r[o.shipNum++],s,o.axis),o.shipCoordsArray.forEach((e=>c(e).classList.add("ship"))),e.renderGameboard("sample",t.name,t.gameboard.getBoard()),o.shipNum===r.length&&(d.remove(),i.init()))},showShip:n,getSamplePlayer:()=>t}})();o.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,