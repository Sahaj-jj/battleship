(()=>{"use strict";const t=(()=>{const t=document.querySelector(".P1"),e=document.querySelector(".P2"),s=()=>{e.classList.add("active")};return s(),{init:s,renderGameboard:(s,a,o)=>{let i="P1"===s?t:e;i.classList.add(a),o.forEach((t=>i.appendChild((t=>{const e=document.createElement("div");return e.classList.add("cell"),e.setAttribute("data-coords",`${t.coords.x} ${t.coords.y}`),t.hasShip&&e.classList.add("ship"),(t=>{t.addEventListener("click",(()=>{const e=t.getAttribute("data-coords").split(" "),s={x:+e[0],y:+e[1]};r.playTurn(s)}))})(e),e})(t))))},cellHit:t=>{const e=`${t.x} ${t.y}`;document.querySelector(`.active > [data-coords="${e}"]`).classList.add("hit")},shipSunk:t=>{t.forEach((t=>{document.querySelector(`.active > [data-coords="${t.x} ${t.y}"]`).classList.add("sunk")}))},toggleActiveBoard:()=>{t.classList.toggle("active"),e.classList.toggle("active")}}})(),e=e=>{const s=[],a=(t=>{const e=[];for(let s=0;s<t*t;s++)e.push({coords:{x:s%t,y:Math.floor(s/t)},hasShip:"",isShot:!1});return e})(e),o=t=>a[t.x+t.y*e];return{at:o,isValidAttack:t=>!o(t).isShot,isShipHit:t=>""!==o(t).hasShip,receiveAttack:e=>{const r=o(e);if(r.isShot=!0,t.cellHit(e),r.hasShip){const e=s.find((t=>t.name===r.hasShip));e.hit(),e.isSunk()&&(e=>{console.log(e);const s=a.filter((t=>t.hasShip===e)).map((t=>t.coords));t.shipSunk(s)})(e.name)}},setShip:(t,e,a="x")=>{s.push(t);let r=e;for(let e=0;e<t.getLength();e++)o(r).hasShip=t.name,"x"===a?r.x++:r.y++},getBoard:()=>a}},s=t=>({name:t,gameboard:e(10),isActive:!1}),a=(t,e)=>{const s=t;let a=0;return{name:e,getLength:()=>s,getHits:()=>a,hit:()=>{a++},isSunk:()=>s===a}},o=t=>{const e=t.filter((t=>!t.isShot));return e[Math.floor(Math.random()*e.length)].coords},r=(()=>{const e=s("player"),r=s("enemy"),c=()=>e.isActive?r:e,d=s=>{const a=c().gameboard;a.isValidAttack(s)&&(a.receiveAttack(s),a.isShipHit(s)||(e.isActive=!e.isActive,r.isActive=!r.isActive,t.toggleActiveBoard()),n())},n=async()=>{r.isActive&&(await(300,new Promise((t=>setTimeout(t,300)))),d(o(c().gameboard.getBoard())))};return{init:()=>{e.isActive=!0,i.getShipInfoArray().forEach((t=>{e.gameboard.setShip(t.ship,t.coords,t.axis)})),t.renderGameboard("P1",e.name,e.gameboard.getBoard()),(()=>{r.isActive=!1;let e=[a(3,"enemya"),a(2,"enemyb")];r.gameboard.setShip(e[0],{x:1,y:1},"x"),r.gameboard.setShip(e[1],{x:2,y:5},"y"),t.renderGameboard("P2",r.name,r.gameboard.getBoard())})()},playTurn:d}})(),i=(()=>{const t=s("sample"),e=[a(4,"ak"),a(2,"b"),a(5,"c"),a(4,"d"),a(2,"e")];let o={shipNum:0,shipCoordsArray:[],axis:"x"};const i=document.querySelector(".modal"),c=document.querySelector(".sample"),d=[],n=(t,s)=>{0!==o.shipCoordsArray.length&&o.shipCoordsArray.forEach((t=>{document.querySelector(`.board > [data-coords="${t.x} ${t.y}"]`).classList.remove("temp")})),o.shipCoordsArray=[];let a=t;for(let t=0;t<e[o.shipNum].getLength()&&(o.shipCoordsArray.push({x:a.x,y:a.y}),document.querySelector(`.board > [data-coords="${a.x} ${a.y}"]`).classList.add("temp"),"x"===s?a.x++:a.y++,!(a.x>9||a.y>9));t++);},l=(t,e,s)=>{let a=c;a.classList.add(e),s.forEach((t=>a.appendChild((t=>{const e=document.createElement("div");return e.classList.add("cell"),e.setAttribute("data-coords",`${t.coords.x} ${t.coords.y}`),(t=>{t.addEventListener("click",(()=>{const e=t.getAttribute("data-coords").split(" "),s={x:+e[0],y:+e[1]};h(s,o.axis)})),t.addEventListener("mouseover",(()=>{const e=t.getAttribute("data-coords").split(" "),s={x:+e[0],y:+e[1]};n(s,o.axis)}))})(e),e})(t))))},h=(t,s)=>{d.push(((t,e,s)=>({ship:t,coords:e,axis:s}))(e[o.shipNum++],t,s)),o.shipCoordsArray.forEach((t=>{const e=document.querySelector(`.board > [data-coords="${t.x} ${t.y}"]`);e.classList.add("ship"),e.classList.remove("temp")})),d.length===e.length&&(i.remove(),r.init())};return{init:()=>{l(0,t.name,t.gameboard.getBoard()),document.addEventListener("keyup",(({key:t})=>{"R"!==t&&"r"!==t||(o.axis="x"===o.axis?"y":"x",n(o.shipCoordsArray[0],o.axis))}))},getShipInfoArray:()=>d}})();i.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,