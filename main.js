(()=>{"use strict";const e=(()=>{const e=document.querySelector(".gameboards-container"),t=document.querySelector(".modal"),s=document.querySelector(".modal-win");let a="PLAY";const r=e=>{const t=e.split(" ");return{x:+t[0],y:+t[1]}},n=(e,t=null,s=null)=>{const a=document.createElement(e);return t&&t.forEach((e=>a.classList.add(e))),s&&(a.textContent=s),a};return{renderGameboard:(s,d,c=!1)=>{a="sample"===s?"PLACE":"PLAY";const h=(e=>{const t=n("div",["container"]);return t.appendChild(n("div",[`${e}`,"board"])),t.appendChild(n("div",["ships-display"])),t})(s);"PLACE"===a?t.appendChild(h):e.appendChild(h),c&&h.firstChild.classList.add("active"),d.forEach((e=>h.firstChild.appendChild((e=>{const t=n("div",["cell"]);return t.setAttribute("data-coords",`${e.coords.x} ${e.coords.y}`),e.hasShip&&t.classList.add("ship"),(e=>{"PLACE"===a?(e.addEventListener("click",(()=>{o.placeShip(r(e.getAttribute("data-coords")))})),e.addEventListener("mouseover",(()=>{o.showShip(r(e.getAttribute("data-coords")))}))):e.addEventListener("click",(()=>{i.playTurn(r(e.getAttribute("data-coords")))}))})(t),t})(e))))},updateShipsDisplay:(e,t,s=-1)=>{const r=document.querySelector(`.${e}`).nextElementSibling;r.textContent="",t.forEach(((e,t)=>{r.appendChild(((e,t=!1)=>{const s=n("div",["ship-container"]);(e.isSunk()||"PLACE"===a&&t)&&s.classList.add("sunk"),s.appendChild(n("div",["ship-name"],e.name));const r=n("div",["ship-body"]);for(let t=0;t<e.getLength();t++)r.appendChild(n("div",["ship-cell"]));return s.appendChild(r),s})(e,t<=s))}))},cellHit:e=>{const t=`${e.x} ${e.y}`;document.querySelector(`.active > [data-coords="${t}"]`).classList.add("hit")},shipSunk:e=>{e.forEach((e=>{document.querySelector(`.active > [data-coords="${e.x} ${e.y}"]`).classList.add("sunk")}))},toggleActiveBoard:()=>{Array.from(e.children).forEach((e=>{e.classList.contains("container")&&e.firstChild.classList.toggle("active")}))},showWinner:e=>{s.firstChild.textContent=`${e} wins`,s.classList.add("visible")}}})(),t=t=>{let s=[],a=0;const r=(e=>{const t=[];for(let s=0;s<e*e;s++)t.push({coords:{x:s%e,y:Math.floor(s/e)},hasShip:"",isShot:!1});return t})(t),i=e=>r[e.x+e.y*t];return{at:i,isValidAttack:e=>!i(e).isShot,isShipHit:e=>""!==i(e).hasShip,receiveAttack:t=>{const o=i(t);if(o.isShot=!0,e.cellHit(t),o.hasShip){const t=s.find((e=>e.name===o.hasShip));t.hit(),t.isSunk()&&(t=>{a++;const s=r.filter((e=>e.hasShip===t)).map((e=>e.coords));e.shipSunk(s)})(t.name)}},setShip:(e,t,a="x")=>{s.push(e);let r=t;for(let t=0;t<e.getLength();t++)i(r).hasShip=e.name,"x"===a?r.x++:r.y++},isCollisions:e=>{for(const a of e){if(a.x>t-1||a.y>t-1)return!0;if(""!==i(a).hasShip)return!0;const e=[{x:(s=a).x+1,y:s.y},{x:s.x-1,y:s.y},{x:s.x,y:s.y+1},{x:s.x,y:s.y-1}];for(const s of e)if(!(s.x>t-1||s.x<0||s.y>t-1||s.y<0)&&""!==i(s).hasShip)return!0}var s;return!1},getBoard:()=>r,getShips:()=>s,reset:()=>{s=[];for(const e of r)e.isShot=!1,e.hasShip=""},allShipsSunk:()=>a>=s.length}},s=(e,s)=>({name:e,displayName:s,gameboard:t(10),isActive:!1}),a=(e,t)=>{const s=e;let a=0;return{name:t,getLength:()=>s,getHits:()=>a,hit:()=>{a++},isSunk:()=>a>=s}},r=(()=>{const e=s("AI"),t=[a(5,"Carrier"),a(4,"Battleship"),a(3,"Cruiser"),a(3,"Submarine"),a(2,"Destroyer")];let r=null;const i=()=>{const t=e.gameboard.getBoard().filter((e=>!e.isShot));return t[Math.floor(Math.random()*t.length)].coords},o=(e,t,s=!1)=>Object.keys(e).reduce(((a,r)=>({...a,[r]:e[r]+(s?-1:1)*t[r]})),{});return{getCoords:t=>{let s;return e.gameboard=t,r?e.gameboard.getShips().find((t=>t.name===e.gameboard.at(r).hasShip)).isSunk()?(r=null,s=i()):s=(()=>{const t=function(e){let t=e.length;for(;t--;){const s=Math.floor(Math.random()*t);[e[t],e[s]]=[e[s],e[t]]}return e}((e=>{const t=[-1,1];let s=[];for(const a of t)for(const t in e){const r=e[t]+a;r<=9&&r>=0&&s.push({...e,[t]:r})}return s})(r));for(const s of t){let t=e.gameboard.at(s);if(t.isShot&&t.hasShip){let a={...s},i=o(a,r,!0);for(;t.isShot&&t.hasShip&&(a=o(a,i),!(a.x<0||a.x>9||a.y<0||a.y>9));)t=e.gameboard.at(a);return t.isShot?o(r,i,!0):a}}for(const s of t)if(!e.gameboard.at(s).isShot)return s})():s=i(),e.gameboard.isShipHit(s)&&(r=s),s},getAIPlayer:()=>(e.gameboard.setShip(t[0],{x:0,y:0},"x"),e.gameboard.setShip(t[1],{x:9,y:6},"y"),e.gameboard.setShip(t[2],{x:1,y:7},"y"),e.gameboard.setShip(t[3],{x:7,y:1},"x"),e.gameboard.setShip(t[4],{x:4,y:3},"x"),e)}})(),i=(()=>{const t=s("P1","Player"),a=s("P2","Enemy");function i(e){return new Promise((t=>setTimeout(t,e)))}const n=()=>t.isActive?a:t,d=async s=>{const r=n().gameboard;if(r.isValidAttack(s)){if(r.receiveAttack(s),r.isShipHit(s)){if(e.updateShipsDisplay(n().name,r.getShips()),r.allShipsSunk())return void e.showWinner((t.isActive?t:a).displayName)}else await i(300),t.isActive=!t.isActive,a.isActive=!a.isActive,e.toggleActiveBoard();c()}},c=async()=>{a.isActive&&(await i(300*Math.random()+300),d(r.getCoords(n().gameboard)))};return{init:()=>{t.isActive=!0,t.gameboard=o.getSamplePlayer().gameboard,e.renderGameboard(t.name,t.gameboard.getBoard()),e.updateShipsDisplay(t.name,t.gameboard.getShips()),a.isActive=!1,a.gameboard=r.getAIPlayer().gameboard,e.renderGameboard(a.name,a.gameboard.getBoard(),!0),e.updateShipsDisplay(a.name,a.gameboard.getShips())},playTurn:d}})(),o=(()=>{const t=s("sample"),r=[a(5,"Carrier"),a(4,"Battleship"),a(3,"Cruiser"),a(3,"Submarine"),a(2,"Destroyer")];let o={shipNum:0,shipCoordsArray:[],axis:"x"};const n=document.querySelector(".modal"),d=document.querySelector("button.play"),c=document.querySelector("button.reset"),h=e=>document.querySelector(`[data-coords="${e.x} ${e.y}"]`),l=e=>{o.shipNum>=r.length||(0!==o.shipCoordsArray.length&&o.shipCoordsArray.forEach((e=>{h(e).classList.remove("temp"),h(e).classList.remove("invalid")})),o.shipCoordsArray=p(e),o.shipCoordsArray.forEach((e=>{h(e).classList.add("temp")})),m()||o.shipCoordsArray.forEach((e=>{h(e).classList.add("invalid")})))},p=e=>{let t=[],s=e;for(let e=0;e<r[o.shipNum].getLength()&&(t.push({x:s.x,y:s.y}),"x"===o.axis?s.x++:s.y++,!(s.x>9||s.y>9));e++);return t},m=()=>!t.gameboard.isCollisions(o.shipCoordsArray)&&o.shipCoordsArray.length===r[o.shipNum].getLength(),u=()=>{t.gameboard.reset(),t.gameboard.getBoard().forEach((e=>{h(e.coords).classList.remove("ship"),h(e.coords).classList.remove("temp"),h(e.coords).classList.remove("invalid")})),Array.from(document.querySelector(".ships-display").children).forEach((e=>e.classList.remove("sunk"))),o={shipNum:0,shipCoordsArray:[],axis:"x"},d.style.display="none"};return{init:()=>{e.renderGameboard(t.name,t.gameboard.getBoard()),e.updateShipsDisplay(t.name,r),document.addEventListener("keyup",(({key:e})=>{"R"!==e&&"r"!==e||(o.axis="x"===o.axis?"y":"x",l(o.shipCoordsArray[0],o.axis))})),d.addEventListener("click",(()=>{n.remove(),i.init()})),c.addEventListener("click",u)},placeShip:s=>{m()&&(t.gameboard.setShip(r[o.shipNum++],s,o.axis),o.shipCoordsArray.forEach((e=>{h(e).classList.add("ship"),h(e).classList.remove("temp")})),e.updateShipsDisplay(t.name,r,o.shipNum-1),o.shipNum===r.length&&(d.style.display="block"))},showShip:l,getSamplePlayer:()=>t}})();o.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,