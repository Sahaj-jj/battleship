(()=>{"use strict";const t=(()=>{const t=document.querySelector(".P1"),e=document.querySelector(".P2"),s=()=>{e.classList.add("active")};return s(),{init:s,renderGameboard:(s,o,a)=>{let i="P1"===s?t:e;i.classList.add(o),a.forEach((t=>i.appendChild((t=>{const e=document.createElement("div");return e.classList.add("cell"),e.setAttribute("data-coords",`${t.coords.x} ${t.coords.y}`),t.hasShip&&e.classList.add("ship"),(t=>{t.addEventListener("click",(()=>{const e=t.getAttribute("data-coords").split(" "),s={x:+e[0],y:+e[1]};r.playTurn(s)}))})(e),e})(t))))},cellHit:t=>{const e=`${t.x} ${t.y}`;document.querySelector(`.active > [data-coords="${e}"]`).classList.add("hit")},shipSunk:t=>{t.forEach((t=>{document.querySelector(`.active > [data-coords="${t.x} ${t.y}"]`).classList.add("sunk")}))},toggleActiveBoard:()=>{t.classList.toggle("active"),e.classList.toggle("active")}}})(),e=e=>{const s=[],o=(t=>{const e=[];for(let s=0;s<t*t;s++)e.push({coords:{x:s%t,y:Math.floor(s/t)},hasShip:"",isShot:!1});return e})(e),a=t=>o[t.x+t.y*e];return{at:a,isValidAttack:t=>!a(t).isShot,isShipHit:t=>""!==a(t).hasShip,receiveAttack:e=>{const r=a(e);if(r.isShot=!0,t.cellHit(e),r.hasShip){const e=s.find((t=>t.name===r.hasShip));e.hit(),e.isSunk()&&(e=>{console.log(e);const s=o.filter((t=>t.hasShip===e)).map((t=>t.coords));t.shipSunk(s)})(e.name)}},setShip:(t,e,o="x")=>{s.push(t);let r=e;for(let e=0;e<t.getLength();e++)a(r).hasShip=t.name,"x"===o?r.x++:r.y++},getBoard:()=>o}},s=t=>({name:t,gameboard:e(10),isActive:!1}),o=(t,e)=>{const s=t;let o=0;return{name:e,getLength:()=>s,getHits:()=>o,hit:()=>{o++},isSunk:()=>s===o}},a=t=>{const e=t.filter((t=>!t.isShot));return e[Math.floor(Math.random()*e.length)].coords},r=(()=>{const e=s("player"),r=s("enemy"),c=()=>e.isActive?r:e,d=s=>{const o=c().gameboard;o.isValidAttack(s)&&(o.receiveAttack(s),o.isShipHit(s)||(e.isActive=!e.isActive,r.isActive=!r.isActive,t.toggleActiveBoard()),n())},n=async()=>{r.isActive&&(await(300,new Promise((t=>setTimeout(t,300)))),d(a(c().gameboard.getBoard())))};return{init:()=>{e.isActive=!0,i.getShipInfoArray().forEach((t=>{e.gameboard.setShip(t.ship,t.coords,t.axis)})),t.renderGameboard("P1",e.name,e.gameboard.getBoard()),(()=>{r.isActive=!1;let e=[o(3,"enemya"),o(2,"enemyb")];r.gameboard.setShip(e[0],{x:1,y:1},"x"),r.gameboard.setShip(e[1],{x:2,y:5},"y"),t.renderGameboard("P2",r.name,r.gameboard.getBoard())})()},playTurn:d}})(),i=(()=>{const t=s("sample"),e=[o(4,"ak"),o(2,"b"),o(5,"c")];let a={shipNum:0,shipCoordsArray:[],axis:"x"};const i=document.querySelector(".modal"),c=document.querySelector(".sample"),d=[],n=t=>{0!==a.shipCoordsArray.length&&a.shipCoordsArray.forEach((t=>{document.querySelector(`.board > [data-coords="${t.x} ${t.y}"]`).classList.remove("temp")})),a.shipCoordsArray=[];let s=t;for(let t=0;t<e[a.shipNum].getLength()&&(a.shipCoordsArray.push({x:s.x,y:s.y}),document.querySelector(`.board > [data-coords="${s.x} ${s.y}"]`).classList.add("temp"),s.x++,!(s.x>9||s.y>9));t++);},l=(t,e,s)=>{let o=c;o.classList.add(e),s.forEach((t=>o.appendChild((t=>{const e=document.createElement("div");return e.classList.add("cell"),e.setAttribute("data-coords",`${t.coords.x} ${t.coords.y}`),(t=>{t.addEventListener("click",(()=>{const e=t.getAttribute("data-coords").split(" "),s={x:+e[0],y:+e[1]};h(s,"x")})),t.addEventListener("mouseover",(()=>{const e=t.getAttribute("data-coords").split(" "),s={x:+e[0],y:+e[1]};n(s)}))})(e),e})(t))))},h=(t,s)=>{d.push(((t,e,s)=>({ship:t,coords:e,axis:s}))(e[a.shipNum++],t,s)),a.shipCoordsArray.forEach((t=>{document.querySelector(`.board > [data-coords="${t.x} ${t.y}"]`).classList.add("ship")})),d.length===e.length&&(i.remove(),r.init())};return{init:()=>{l(0,t.name,t.gameboard.getBoard())},getShipInfoArray:()=>d}})();i.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,