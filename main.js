(()=>{"use strict";const e=(()=>{const e=document.querySelector(".main"),t=document.querySelector(".modal");let s="PLAY";const a=e=>{const t=e.split(" ");return{x:+t[0],y:+t[1]}},r=(e,t=null,s=null)=>{const a=document.createElement(e);return t&&t.forEach((e=>a.classList.add(e))),s&&(a.textContent=s),a};return{renderGameboard:(r,d,n,c=!1)=>{s="sample"===d?"PLACE":"PLAY";const l=(a=>{const r=document.createElement("div");r.classList.add("container");const i=document.createElement("div");i.classList.add(`${a}`),i.classList.add("board");const o=document.createElement("div");return o.classList.add("ships-display"),r.appendChild(i),r.appendChild(o),"PLACE"===s?t.appendChild(r):e.appendChild(r),r})(d);c&&l.firstChild.classList.add("active"),n.forEach((e=>l.firstChild.appendChild((e=>{const t=document.createElement("div");return t.classList.add("cell"),t.setAttribute("data-coords",`${e.coords.x} ${e.coords.y}`),e.hasShip&&t.classList.add("ship"),(e=>{"PLACE"===s?(e.addEventListener("click",(()=>{o.placeShip(a(e.getAttribute("data-coords")))})),e.addEventListener("mouseover",(()=>{o.showShip(a(e.getAttribute("data-coords")))}))):e.addEventListener("click",(()=>{i.playTurn(a(e.getAttribute("data-coords")))}))})(t),t})(e))))},updateShipsDisplay:(e,t,a=-1)=>{const i=document.querySelector(`.${e}`).nextElementSibling;i.textContent="",t.forEach(((e,t)=>{i.appendChild(((e,t=!1)=>{const a=r("div",["ship-container"]);(e.isSunk()||"PLACE"===s&&t)&&a.classList.add("sunk"),a.appendChild(r("div",["ship-name"],e.name));const i=r("div",["ship-body"]);for(let t=0;t<e.getLength();t++)i.appendChild(r("div",["ship-cell"]));return a.appendChild(i),a})(e,t<=a))}))},cellHit:e=>{const t=`${e.x} ${e.y}`;document.querySelector(`.active > [data-coords="${t}"]`).classList.add("hit")},shipSunk:e=>{e.forEach((e=>{document.querySelector(`.active > [data-coords="${e.x} ${e.y}"]`).classList.add("sunk")}))},toggleActiveBoard:()=>{Array.from(e.children).forEach((e=>{e.firstChild.classList.toggle("active")}))}}})(),t=t=>{let s=[],a=0;const r=(e=>{const t=[];for(let s=0;s<e*e;s++)t.push({coords:{x:s%e,y:Math.floor(s/e)},hasShip:"",isShot:!1});return t})(t),i=e=>r[e.x+e.y*t];return{at:i,isValidAttack:e=>!i(e).isShot,isShipHit:e=>""!==i(e).hasShip,receiveAttack:t=>{const o=i(t);if(o.isShot=!0,e.cellHit(t),o.hasShip){const t=s.find((e=>e.name===o.hasShip));t.hit(),t.isSunk()&&(t=>{a++;const s=r.filter((e=>e.hasShip===t)).map((e=>e.coords));e.shipSunk(s)})(t.name)}},setShip:(e,t,a="x")=>{s.push(e);let r=t;for(let t=0;t<e.getLength();t++)i(r).hasShip=e.name,"x"===a?r.x++:r.y++},isCollisions:e=>{for(const s of e){if(s.x>t-1||s.y>t-1)return!0;if(""!==i(s).hasShip)return!0}return!1},getBoard:()=>r,getShips:()=>s,reset:()=>{s=[];for(const e of r)e.isShot=!1,e.hasShip=""},allShipsSunk:()=>a>=s.length}},s=e=>({name:e,gameboard:t(10),isActive:!1}),a=(e,t)=>{const s=e;let a=0;return{name:t,getLength:()=>s,getHits:()=>a,hit:()=>{a++},isSunk:()=>a>=s}},r=(()=>{const e=s("AI"),t=[a(5,"Carrier"),a(4,"Battleship"),a(3,"Cruiser"),a(3,"Submarine"),a(2,"Destroyer")];return{getCoords:e=>{const t=e.filter((e=>!e.isShot));return t[Math.floor(Math.random()*t.length)].coords},getAIPlayer:()=>(e.gameboard.setShip(t[0],{x:0,y:0},"x"),e.gameboard.setShip(t[1],{x:9,y:6},"y"),e.gameboard.setShip(t[2],{x:1,y:7},"y"),e.gameboard.setShip(t[3],{x:7,y:1},"x"),e.gameboard.setShip(t[4],{x:4,y:3},"x"),e)}})(),i=(()=>{const t=s("P1"),a=s("P2"),i=()=>t.isActive?a:t,d=s=>{const r=i().gameboard;r.isValidAttack(s)&&(r.receiveAttack(s),e.updateShipsDisplay(i().name,r.getShips()),r.isShipHit(s)?r.allShipsSunk()&&console.log("player wins"):(t.isActive=!t.isActive,a.isActive=!a.isActive,e.toggleActiveBoard()),n())},n=async()=>{a.isActive&&(await(300,new Promise((e=>setTimeout(e,300)))),d(r.getCoords(i().gameboard.getBoard())))};return{init:()=>{t.isActive=!0,t.gameboard=o.getSamplePlayer().gameboard,e.renderGameboard("P1",t.name,t.gameboard.getBoard()),e.updateShipsDisplay(t.name,t.gameboard.getShips()),a.isActive=!1,a.gameboard=r.getAIPlayer().gameboard,e.renderGameboard("P2",a.name,a.gameboard.getBoard(),!0),e.updateShipsDisplay(a.name,a.gameboard.getShips())},playTurn:d}})(),o=(()=>{const t=s("sample"),r=[a(5,"Carrier"),a(4,"Battleship"),a(3,"Cruiser"),a(3,"Submarine"),a(2,"Destroyer")];let o={shipNum:0,shipCoordsArray:[],axis:"x"};const d=document.querySelector(".modal"),n=document.querySelector("button.play"),c=document.querySelector("button.reset"),l=e=>document.querySelector(`[data-coords="${e.x} ${e.y}"]`),h=e=>{o.shipNum>=r.length||(0!==o.shipCoordsArray.length&&o.shipCoordsArray.forEach((e=>{l(e).classList.remove("temp"),l(e).classList.remove("invalid")})),o.shipCoordsArray=p(e),o.shipCoordsArray.forEach((e=>{l(e).classList.add("temp")})),m()||o.shipCoordsArray.forEach((e=>{l(e).classList.add("invalid")})))},p=e=>{let t=[],s=e;for(let e=0;e<r[o.shipNum].getLength()&&(t.push({x:s.x,y:s.y}),"x"===o.axis?s.x++:s.y++,!(s.x>9||s.y>9));e++);return t},m=()=>!t.gameboard.isCollisions(o.shipCoordsArray)&&o.shipCoordsArray.length===r[o.shipNum].getLength(),u=()=>{t.gameboard.reset(),t.gameboard.getBoard().forEach((e=>{l(e.coords).classList.remove("ship"),l(e.coords).classList.remove("temp")})),Array.from(document.querySelector(".ships-display").children).forEach((e=>e.classList.remove("sunk"))),o={shipNum:0,shipCoordsArray:[],axis:"x"},n.style.display="none"};return{init:()=>{e.renderGameboard("sample",t.name,t.gameboard.getBoard()),e.updateShipsDisplay(t.name,r),document.addEventListener("keyup",(({key:e})=>{"R"!==e&&"r"!==e||(o.axis="x"===o.axis?"y":"x",h(o.shipCoordsArray[0],o.axis))})),n.addEventListener("click",(()=>{d.remove(),i.init()})),c.addEventListener("click",u)},placeShip:s=>{m()&&(t.gameboard.setShip(r[o.shipNum++],s,o.axis),o.shipCoordsArray.forEach((e=>{l(e).classList.add("ship"),l(e).classList.remove("temp")})),e.updateShipsDisplay(t.name,r,o.shipNum-1),o.shipNum===r.length&&(n.style.display="block"))},showShip:h,getSamplePlayer:()=>t}})();o.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,