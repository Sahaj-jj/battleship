(()=>{"use strict";const e=e=>{let t=[],s=0;const a=(e=>{const t=[];for(let s=0;s<e*e;s++)t.push({coords:{x:s%e,y:Math.floor(s/e)},hasShip:"",isShot:!1});return t})(e),r=t=>a[t.x+t.y*e];return{at:r,isValidAttack:e=>!r(e).isShot,isShipHit:e=>""!==r(e).hasShip,receiveAttack:e=>{const a=r(e);a.isShot=!0,a.hasShip&&(e=>{const a=t.find((t=>t.name===e));a.hit(),a.isSunk()&&s++})(a.hasShip)},setShip:(e,s,a="x")=>{t.push(e);let i=s;for(let t=0;t<e.getLength();t++)r(i).hasShip=e.name,"x"===a?i.x++:i.y++},getShipCoordsArray:e=>a.filter((t=>t.hasShip===e.name)).map((e=>e.coords)),isCollisions:t=>{for(const a of t){if(a.x>e-1||a.y>e-1)return!0;if(""!==r(a).hasShip)return!0;const t=[{x:(s=a).x+1,y:s.y},{x:s.x-1,y:s.y},{x:s.x,y:s.y+1},{x:s.x,y:s.y-1}];for(const s of t)if(!(s.x>e-1||s.x<0||s.y>e-1||s.y<0)&&""!==r(s).hasShip)return!0}var s;return!1},getShipByCoords:e=>t.find((t=>t.name===r(e).hasShip)),getBoard:()=>a,getShips:()=>t,reset:()=>{t=[];for(const e of a)e.isShot=!1,e.hasShip=""},allShipsSunk:()=>s>=t.length}},t=(t,s)=>({name:t,displayName:s,gameboard:e(10),isActive:!1}),s=(()=>{const e=document.querySelector(".gameboards-container"),t=document.querySelector(".modal"),s=document.querySelector(".modal-win");let a="PLAY";const r=e=>{const t=e.split(" ");return{x:+t[0],y:+t[1]}},n=(e,t=null,s=null)=>{const a=document.createElement(e);return t&&t.forEach((e=>a.classList.add(e))),s&&(a.textContent=s),a};return{renderGameboard:(s,d,c=!1)=>{a="sample"===s?"PLACE":"PLAY";const h=(e=>{const t=n("div",["container"]);return t.appendChild(n("div",[`${e}`,"board"])),t.appendChild(n("div",["ships-display"])),t})(s);"PLACE"===a?t.appendChild(h):e.appendChild(h),c&&h.firstChild.classList.add("active"),d.forEach((e=>h.firstChild.appendChild((e=>{const t=n("div",["cell"]);return t.setAttribute("data-coords",`${e.coords.x} ${e.coords.y}`),e.hasShip&&t.classList.add("ship"),(e=>{"PLACE"===a?(e.addEventListener("click",(()=>{o.placeShip(r(e.getAttribute("data-coords")))})),e.addEventListener("mouseover",(()=>{o.showShip(r(e.getAttribute("data-coords")))}))):e.addEventListener("click",(()=>{i.playTurn(r(e.getAttribute("data-coords")))}))})(t),t})(e))))},updateShipsDisplay:(e,t,s=-1)=>{const r=document.querySelector(`.${e}`).nextElementSibling;r.textContent="",t.forEach(((e,t)=>{r.appendChild(((e,t=!1)=>{const s=n("div",["ship-container"]);(e.isSunk()||"PLACE"===a&&t)&&s.classList.add("sunk"),s.appendChild(n("div",["ship-name"],e.name));const r=n("div",["ship-body"]);for(let t=0;t<e.getLength();t++)r.appendChild(n("div",["ship-cell"]));return s.appendChild(r),s})(e,t<=s))}))},cellHit:e=>{console.log(e);const t=`${e.x} ${e.y}`;document.querySelector(`.active > [data-coords="${t}"]`).classList.add("hit")},shipSunk:e=>{e.forEach((e=>{document.querySelector(`.active > [data-coords="${e.x} ${e.y}"]`).classList.add("sunk")}))},toggleActiveBoard:()=>{Array.from(e.children).forEach((e=>{e.classList.contains("container")&&e.firstChild.classList.toggle("active")}))},showWinner:e=>{s.firstChild.textContent=`${e} wins`,s.classList.add("visible")}}})(),a=(e,t)=>{const s=e;let a=0;return{name:t,getLength:()=>s,getHits:()=>a,hit:()=>{a++},isSunk:()=>a>=s}},r=(()=>{const e=t("AI"),s=[a(5,"Carrier"),a(4,"Battleship"),a(3,"Cruiser"),a(3,"Submarine"),a(2,"Destroyer")];let r=null;const i=()=>{const t=e.gameboard.getBoard().filter((e=>!e.isShot));return t[Math.floor(Math.random()*t.length)].coords},o=(e,t,s=!1)=>Object.keys(e).reduce(((a,r)=>({...a,[r]:e[r]+(s?-1:1)*t[r]})),{});return{getCoords:t=>{let s;return e.gameboard=t,r?e.gameboard.getShips().find((t=>t.name===e.gameboard.at(r).hasShip)).isSunk()?(r=null,s=i()):s=(()=>{const t=function(e){let t=e.length;for(;t--;){const s=Math.floor(Math.random()*t);[e[t],e[s]]=[e[s],e[t]]}return e}((e=>{const t=[-1,1];let s=[];for(const a of t)for(const t in e){const r=e[t]+a;r<=9&&r>=0&&s.push({...e,[t]:r})}return s})(r));for(const s of t){let t=e.gameboard.at(s);if(t.isShot&&t.hasShip){let a={...s},i=o(a,r,!0);for(;t.isShot&&t.hasShip&&(a=o(a,i),!(a.x<0||a.x>9||a.y<0||a.y>9));)t=e.gameboard.at(a);return t.isShot?o(r,i,!0):a}}for(const s of t)if(!e.gameboard.at(s).isShot)return s})():s=i(),e.gameboard.isShipHit(s)&&(r=s),s},getAIPlayer:()=>(e.gameboard.setShip(s[0],{x:0,y:0},"x"),e.gameboard.setShip(s[1],{x:9,y:6},"y"),e.gameboard.setShip(s[2],{x:1,y:7},"y"),e.gameboard.setShip(s[3],{x:7,y:1},"x"),e.gameboard.setShip(s[4],{x:4,y:3},"x"),e)}})(),i=(()=>{const e=t("P1","Player"),a=t("P2","Enemy");function i(e){return new Promise((t=>setTimeout(t,e)))}const n=()=>e.isActive?a:e,d=async t=>{const r=n().gameboard;if(r.isValidAttack(t)){if(r.receiveAttack(t),s.cellHit(t),r.isShipHit(t)){s.updateShipsDisplay(n().name,r.getShips());const i=r.getShipByCoords(t);if(i.isSunk()&&(s.shipSunk(r.getShipCoordsArray(i)),r.allShipsSunk()))return void s.showWinner((e.isActive?e:a).displayName)}else await i(300),e.isActive=!e.isActive,a.isActive=!a.isActive,s.toggleActiveBoard();c()}},c=async()=>{a.isActive&&(await i(300*Math.random()+300),d(r.getCoords(n().gameboard)))};return{init:()=>{e.isActive=!0,e.gameboard=o.getSamplePlayer().gameboard,s.renderGameboard(e.name,e.gameboard.getBoard()),s.updateShipsDisplay(e.name,e.gameboard.getShips()),a.isActive=!1,a.gameboard=r.getAIPlayer().gameboard,s.renderGameboard(a.name,a.gameboard.getBoard(),!0),s.updateShipsDisplay(a.name,a.gameboard.getShips())},playTurn:d}})(),o=(()=>{const e=t("sample"),r=[a(5,"Carrier"),a(4,"Battleship"),a(3,"Cruiser"),a(3,"Submarine"),a(2,"Destroyer")];let o={shipNum:0,shipCoordsArray:[],axis:"x"};const n=document.querySelector(".modal"),d=document.querySelector("button.play"),c=document.querySelector("button.reset"),h=e=>document.querySelector(`[data-coords="${e.x} ${e.y}"]`),l=e=>{o.shipNum>=r.length||(0!==o.shipCoordsArray.length&&o.shipCoordsArray.forEach((e=>{h(e).classList.remove("temp"),h(e).classList.remove("invalid")})),o.shipCoordsArray=p(e),o.shipCoordsArray.forEach((e=>{h(e).classList.add("temp")})),m()||o.shipCoordsArray.forEach((e=>{h(e).classList.add("invalid")})))},p=e=>{let t=[],s=e;for(let e=0;e<r[o.shipNum].getLength()&&(t.push({x:s.x,y:s.y}),"x"===o.axis?s.x++:s.y++,!(s.x>9||s.y>9));e++);return t},m=()=>!e.gameboard.isCollisions(o.shipCoordsArray)&&o.shipCoordsArray.length===r[o.shipNum].getLength(),u=()=>{e.gameboard.reset(),e.gameboard.getBoard().forEach((e=>{h(e.coords).classList.remove("ship"),h(e.coords).classList.remove("temp"),h(e.coords).classList.remove("invalid")})),Array.from(document.querySelector(".ships-display").children).forEach((e=>e.classList.remove("sunk"))),o={shipNum:0,shipCoordsArray:[],axis:"x"},d.style.display="none"};return{init:()=>{s.renderGameboard(e.name,e.gameboard.getBoard()),s.updateShipsDisplay(e.name,r),document.addEventListener("keyup",(({key:e})=>{"R"!==e&&"r"!==e||(o.axis="x"===o.axis?"y":"x",l(o.shipCoordsArray[0],o.axis))})),d.addEventListener("click",(()=>{n.remove(),i.init()})),c.addEventListener("click",u)},placeShip:t=>{m()&&(e.gameboard.setShip(r[o.shipNum++],t,o.axis),o.shipCoordsArray.forEach((e=>{h(e).classList.add("ship"),h(e).classList.remove("temp")})),s.updateShipsDisplay(e.name,r,o.shipNum-1),o.shipNum===r.length&&(d.style.display="block"))},showShip:l,getSamplePlayer:()=>e}})();o.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,