(()=>{"use strict";const e=(()=>{const e=document.querySelector(".main"),t=document.querySelector(".modal"),s=document.querySelector(".modal-win");let a="PLAY";const i=e=>{const t=e.split(" ");return{x:+t[0],y:+t[1]}},d=(e,t=null,s=null)=>{const a=document.createElement(e);return t&&t.forEach((e=>a.classList.add(e))),s&&(a.textContent=s),a};return{renderGameboard:(s,n,c,l=!1)=>{a="sample"===n?"PLACE":"PLAY";const h=(s=>{const i=d("div",["container"]);return i.appendChild(d("div",[`${s}`,"board"])),i.appendChild(d("div",["ships-display"])),"PLACE"===a?t.appendChild(i):e.appendChild(i),i})(n);l&&h.firstChild.classList.add("active"),c.forEach((e=>h.firstChild.appendChild((e=>{const t=d("div",["cell"]);return t.setAttribute("data-coords",`${e.coords.x} ${e.coords.y}`),e.hasShip&&t.classList.add("ship"),(e=>{"PLACE"===a?(e.addEventListener("click",(()=>{o.placeShip(i(e.getAttribute("data-coords")))})),e.addEventListener("mouseover",(()=>{o.showShip(i(e.getAttribute("data-coords")))}))):e.addEventListener("click",(()=>{r.playTurn(i(e.getAttribute("data-coords")))}))})(t),t})(e))))},updateShipsDisplay:(e,t,s=-1)=>{const i=document.querySelector(`.${e}`).nextElementSibling;i.textContent="",t.forEach(((e,t)=>{i.appendChild(((e,t=!1)=>{const s=d("div",["ship-container"]);(e.isSunk()||"PLACE"===a&&t)&&s.classList.add("sunk"),s.appendChild(d("div",["ship-name"],e.name));const i=d("div",["ship-body"]);for(let t=0;t<e.getLength();t++)i.appendChild(d("div",["ship-cell"]));return s.appendChild(i),s})(e,t<=s))}))},cellHit:e=>{const t=`${e.x} ${e.y}`;document.querySelector(`.active > [data-coords="${t}"]`).classList.add("hit")},shipSunk:e=>{e.forEach((e=>{document.querySelector(`.active > [data-coords="${e.x} ${e.y}"]`).classList.add("sunk")}))},toggleActiveBoard:()=>{Array.from(e.children).forEach((e=>{e.firstChild.classList.toggle("active")}))},showWinner:e=>{s.textContent=`${e} wins`,s.classList.add("visible")}}})(),t=t=>{let s=[],a=0;const i=(e=>{const t=[];for(let s=0;s<e*e;s++)t.push({coords:{x:s%e,y:Math.floor(s/e)},hasShip:"",isShot:!1});return t})(t),r=e=>i[e.x+e.y*t];return{at:r,isValidAttack:e=>!r(e).isShot,isShipHit:e=>""!==r(e).hasShip,receiveAttack:t=>{const o=r(t);if(o.isShot=!0,e.cellHit(t),o.hasShip){const t=s.find((e=>e.name===o.hasShip));t.hit(),t.isSunk()&&(t=>{a++;const s=i.filter((e=>e.hasShip===t)).map((e=>e.coords));e.shipSunk(s)})(t.name)}},setShip:(e,t,a="x")=>{s.push(e);let i=t;for(let t=0;t<e.getLength();t++)r(i).hasShip=e.name,"x"===a?i.x++:i.y++},isCollisions:e=>{for(const s of e){if(s.x>t-1||s.y>t-1)return!0;if(""!==r(s).hasShip)return!0}return!1},getBoard:()=>i,getShips:()=>s,reset:()=>{s=[];for(const e of i)e.isShot=!1,e.hasShip=""},allShipsSunk:()=>a>=s.length}},s=(e,s)=>({name:e,displayName:s,gameboard:t(10),isActive:!1}),a=(e,t)=>{const s=e;let a=0;return{name:t,getLength:()=>s,getHits:()=>a,hit:()=>{a++},isSunk:()=>a>=s}},i=(()=>{const e=s("AI"),t=[a(5,"Carrier"),a(4,"Battleship"),a(3,"Cruiser"),a(3,"Submarine"),a(2,"Destroyer")];return{getCoords:e=>{const t=e.filter((e=>!e.isShot));return t[Math.floor(Math.random()*t.length)].coords},getAIPlayer:()=>(e.gameboard.setShip(t[0],{x:0,y:0},"x"),e.gameboard.setShip(t[1],{x:9,y:6},"y"),e.gameboard.setShip(t[2],{x:1,y:7},"y"),e.gameboard.setShip(t[3],{x:7,y:1},"x"),e.gameboard.setShip(t[4],{x:4,y:3},"x"),e)}})(),r=(()=>{const t=s("P1","Player"),a=s("P2","Enemy");function r(e){return new Promise((t=>setTimeout(t,e)))}const d=()=>t.isActive?a:t,n=async s=>{const i=d().gameboard;if(i.isValidAttack(s)){if(i.receiveAttack(s),e.updateShipsDisplay(d().name,i.getShips()),i.isShipHit(s)){if(i.allShipsSunk())return void e.showWinner((t.isActive?t:a).displayName)}else await r(300),t.isActive=!t.isActive,a.isActive=!a.isActive,e.toggleActiveBoard();c()}},c=async()=>{a.isActive&&(await r(300*Math.random()+500),n(i.getCoords(d().gameboard.getBoard())))};return{init:()=>{t.isActive=!0,t.gameboard=o.getSamplePlayer().gameboard,e.renderGameboard("P1",t.name,t.gameboard.getBoard()),e.updateShipsDisplay(t.name,t.gameboard.getShips()),a.isActive=!1,a.gameboard=i.getAIPlayer().gameboard,e.renderGameboard("P2",a.name,a.gameboard.getBoard(),!0),e.updateShipsDisplay(a.name,a.gameboard.getShips())},playTurn:n}})(),o=(()=>{const t=s("sample"),i=[a(5,"Carrier"),a(4,"Battleship"),a(3,"Cruiser"),a(3,"Submarine"),a(2,"Destroyer")];let o={shipNum:0,shipCoordsArray:[],axis:"x"};const d=document.querySelector(".modal"),n=document.querySelector("button.play"),c=document.querySelector("button.reset"),l=e=>document.querySelector(`[data-coords="${e.x} ${e.y}"]`),h=e=>{o.shipNum>=i.length||(0!==o.shipCoordsArray.length&&o.shipCoordsArray.forEach((e=>{l(e).classList.remove("temp"),l(e).classList.remove("invalid")})),o.shipCoordsArray=p(e),o.shipCoordsArray.forEach((e=>{l(e).classList.add("temp")})),m()||o.shipCoordsArray.forEach((e=>{l(e).classList.add("invalid")})))},p=e=>{let t=[],s=e;for(let e=0;e<i[o.shipNum].getLength()&&(t.push({x:s.x,y:s.y}),"x"===o.axis?s.x++:s.y++,!(s.x>9||s.y>9));e++);return t},m=()=>!t.gameboard.isCollisions(o.shipCoordsArray)&&o.shipCoordsArray.length===i[o.shipNum].getLength(),u=()=>{t.gameboard.reset(),t.gameboard.getBoard().forEach((e=>{l(e.coords).classList.remove("ship"),l(e.coords).classList.remove("temp")})),Array.from(document.querySelector(".ships-display").children).forEach((e=>e.classList.remove("sunk"))),o={shipNum:0,shipCoordsArray:[],axis:"x"},n.style.display="none"};return{init:()=>{e.renderGameboard("sample",t.name,t.gameboard.getBoard()),e.updateShipsDisplay(t.name,i),document.addEventListener("keyup",(({key:e})=>{"R"!==e&&"r"!==e||(o.axis="x"===o.axis?"y":"x",h(o.shipCoordsArray[0],o.axis))})),n.addEventListener("click",(()=>{d.remove(),r.init()})),c.addEventListener("click",u)},placeShip:s=>{m()&&(t.gameboard.setShip(i[o.shipNum++],s,o.axis),o.shipCoordsArray.forEach((e=>{l(e).classList.add("ship"),l(e).classList.remove("temp")})),e.updateShipsDisplay(t.name,i,o.shipNum-1),o.shipNum===i.length&&(n.style.display="block"))},showShip:h,getSamplePlayer:()=>t}})();o.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,