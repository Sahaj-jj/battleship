(()=>{"use strict";const e=(()=>{const e=document.querySelector(".P1"),t=document.querySelector(".P2"),s=()=>{t.classList.add("active")};return s(),{init:s,renderGameboard:(s,a,r)=>{let i="P1"===s?e:t;i.classList.add(a),r.forEach((e=>i.appendChild((e=>{const t=document.createElement("div");return t.classList.add("cell"),t.setAttribute("data-coords",`${e.coords.x} ${e.coords.y}`),e.hasShip&&t.classList.add("ship"),(e=>{e.addEventListener("click",(()=>{const t=e.getAttribute("data-coords").split(" "),s={x:+t[0],y:+t[1]};o.playTurn(s)}))})(t),t})(e))))},cellHit:e=>{const t=`${e.x} ${e.y}`;document.querySelector(`.active > [data-coords="${t}"]`).classList.add("hit")},shipSunk:e=>{e.forEach((e=>{document.querySelector(`.active > [data-coords="${e.x} ${e.y}"]`).classList.add("sunk")}))},toggleActiveBoard:()=>{e.classList.toggle("active"),t.classList.toggle("active")}}})(),t=t=>{const s=[],a=(e=>{const t=[];for(let s=0;s<e*e;s++)t.push({coords:{x:s%e,y:Math.floor(s/e)},hasShip:"",isShot:!1});return t})(t),r=e=>a[e.x+e.y*t];return{at:r,isValidAttack:e=>!r(e).isShot,isShipHit:e=>""!==r(e).hasShip,receiveAttack:t=>{const o=r(t);if(o.isShot=!0,e.cellHit(t),o.hasShip){const t=s.find((e=>e.name===o.hasShip));t.hit(),t.isSunk()&&(t=>{console.log(t);const s=a.filter((e=>e.hasShip===t)).map((e=>e.coords));e.shipSunk(s)})(t.name)}},setShip:(e,t,a="x")=>{s.push(e);let o=t;for(let t=0;t<e.getLength();t++)r(o).hasShip=e.name,"x"===a?o.x++:o.y++},isCollisions:e=>{for(const s of e){if(s.x>t-1||s.y>t-1)return!0;if(""!==r(s).hasShip)return!0}return!1},getBoard:()=>a}},s=e=>({name:e,gameboard:t(10),isActive:!1}),a=(e,t)=>{const s=e;let a=0;return{name:t,getLength:()=>s,getHits:()=>a,hit:()=>{a++},isSunk:()=>s===a}},r=e=>{const t=e.filter((e=>!e.isShot));return t[Math.floor(Math.random()*t.length)].coords},o=(()=>{const t=s("player"),o=s("enemy"),d=()=>t.isActive?o:t,c=s=>{const a=d().gameboard;a.isValidAttack(s)&&(a.receiveAttack(s),a.isShipHit(s)||(t.isActive=!t.isActive,o.isActive=!o.isActive,e.toggleActiveBoard()),n())},n=async()=>{o.isActive&&(await(300,new Promise((e=>setTimeout(e,300)))),c(r(d().gameboard.getBoard())))};return{init:()=>{t.isActive=!0,t.gameboard=i.getSamplePlayer().gameboard,e.renderGameboard("P1",t.name,t.gameboard.getBoard()),(()=>{o.isActive=!1;let t=[a(3,"enemya"),a(2,"enemyb")];o.gameboard.setShip(t[0],{x:1,y:1},"x"),o.gameboard.setShip(t[1],{x:2,y:5},"y"),e.renderGameboard("P2",o.name,o.gameboard.getBoard())})()},playTurn:c}})(),i=(()=>{const e=s("sample"),t=[a(4,"ak"),a(2,"b"),a(5,"c"),a(4,"d"),a(2,"e")];let r={shipNum:0,shipCoordsArray:[],axis:"x"};const i=document.querySelector(".modal"),d=document.querySelector(".sample"),c=e=>{const t=e.split(" ");return{x:+t[0],y:+t[1]}},n=e=>document.querySelector(`[data-coords="${e.x} ${e.y}"]`),l=(e,t)=>{0!==r.shipCoordsArray.length&&r.shipCoordsArray.forEach((e=>{n(e).classList.remove("temp"),n(e).classList.remove("invalid")})),r.shipCoordsArray=[],h(e,t),m()||r.shipCoordsArray.forEach((e=>{n(e).classList.add("invalid")})),r.shipCoordsArray.forEach((e=>{n(e).classList.add("temp")}))},h=(e,s)=>{let a=e;for(let e=0;e<t[r.shipNum].getLength()&&(r.shipCoordsArray.push({x:a.x,y:a.y}),"x"===s?a.x++:a.y++,!(a.x>9||a.y>9));e++);},m=()=>!e.gameboard.isCollisions(r.shipCoordsArray)&&r.shipCoordsArray.length===t[r.shipNum].getLength(),p=(e,t,s)=>{let a=d;a.classList.add(t),s.forEach((e=>a.appendChild((e=>{const t=document.createElement("div");return t.classList.add("cell"),t.setAttribute("data-coords",`${e.coords.x} ${e.coords.y}`),(async e=>{e.addEventListener("click",(()=>{u(c(e.getAttribute("data-coords")),r.axis),Promise.resolve(c(e.getAttribute("data-coords")))})),e.addEventListener("mouseover",(()=>{l(c(e.getAttribute("data-coords")),r.axis)}))})(t),t})(e))))},u=(s,a)=>{m()&&(e.gameboard.setShip(t[r.shipNum++],s,a),r.shipCoordsArray.forEach((e=>{const t=n(e);t.classList.add("ship"),t.classList.remove("temp")})),r.shipNum===t.length-1&&(i.remove(),o.init()))};return{init:()=>{p(0,e.name,e.gameboard.getBoard()),document.addEventListener("keyup",(({key:e})=>{"R"!==e&&"r"!==e||(r.axis="x"===r.axis?"y":"x",l(r.shipCoordsArray[0],r.axis))}))},getSamplePlayer:()=>e}})();i.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,